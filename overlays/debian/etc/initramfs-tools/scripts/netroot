# netroot filesystem mounting			-*- shell-script -*-

# FIXME This needs error checking

netroot_top()
{
	if [ "${netroot_top_used}" != "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/netroot-top"
		run_scripts /scripts/netroot-top
		[ "$quiet" != "y" ] && log_end_msg
	fi
	netroot_top_used=yes
}

netroot_premount()
{
	if [ "${netroot_premount_used}" != "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/netroot-premount"
		run_scripts /scripts/netroot-premount
		[ "$quiet" != "y" ] && log_end_msg
	fi
	netroot_premount_used=yes
}

netroot_bottom()
{
	if [ "${netroot_premount_used}" = "yes" ] || [ "${netroot_top_used}" = "yes" ]; then
		[ "${quiet?}" != "y" ] && log_begin_msg "Running /scripts/netroot-bottom"
		run_scripts /scripts/netroot-bottom
		[ "$quiet" != "y" ] && log_end_msg
	fi
	netroot_premount_used=no
	netroot_top_used=no
}

# parse netroot bootargs and mount netroot
netroot_mount_root_impl()
{
	configure_networking

    proto="$NETROOT_PROTO"
    case "$proto" in
        "nbfs")
            remote_share="${NBFSROOT}"
            mount_prog=mount.nbfs
            ;;
        "nfs4")
            remote_share="${NFSROOT}"
            mount_prog=mount.nfs
            ;;
        "nfs")
            remote_share="${NFSROOT}"
            mount_prog=nfsmount
            ;;
    esac

	# remote_share=<server-ip>:<root-dir>[,<options>]
    if [ "${remote_share#*,}" != "${remote_share}" ]; then
        options="-o ${remote_share#*,}"
    fi
    remote_share=${remote_share%%,*}

	netroot_premount

	if [ "${readonly?}" = y ]; then
		roflag="-o ro"
	fi

	# shellcheck disable=SC2086
	${mount_prog} ${roflag} ${options} "${remote_share}" "${rootmnt?}"
}

# NBFS root mounting
netroot_mount_root()
{
	netroot_top

    # get target protocol
    NETROOT_PROTO="${ROOT#/dev/}"

    if [ "$NETROOT_PROTO" = "nbfs" ]
    then
        # read nbfsroot from command line
        for x in $(cat /proc/cmdline); do
        case $x in
            nbfsroot=*)
                # shellcheck disable=SC2034
                NBFSROOT="${x#nbfsroot=}"
                ;;
        esac
        done
        # load fuse
        modprobe fuse
    fi

	modprobe af_packet # For DHCP

	wait_for_udev 10

	# Default delay is around 180s
	delay=${ROOTDELAY:-180}

	# loop until mount -t netroot succeeds
	netroot_mount_root_impl
	ret=$?
	netroot_retry_count=0
	while [ ${netroot_retry_count} -lt "${delay}" ] \
		&& [ $ret -ne 0 ] ; do
		[ "$quiet" != "y" ] && log_begin_msg "Retrying netroot mount"
		sleep 1
		netroot_mount_root_impl
		ret=$?
		netroot_retry_count=$(( netroot_retry_count + 1 ))
		[ "$quiet" != "y" ] && log_end_msg
	done
}

mountroot()
{
	netroot_mount_root
}

mount_top()
{
	netroot_top
}

mount_premount()
{
	netroot_premount
}

mount_bottom()
{
	netroot_bottom
}
